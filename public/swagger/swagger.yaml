openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /api/users/super-admin-registration:
    post:
      description: Super admin registration.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - username
                - email
                - password
                - phone
                - birthDate
                - profileImage
              properties:
                firstName:
                  type: string
                  minLength: 3
                  maxLength: 30
                  example: "Jean"
                lastName:
                  type: string
                  minLength: 3
                  maxLength: 30
                  example: "Dupont"
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  example: "jeandupont"
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: "jean.dupont@example.com"
                password:
                  type: string
                  minLength: 8
                  maxLength: 50
                  example: "Password123!"
                phone:
                  type: string
                  example: "0612345678"
                address:
                  type: object
                  required:
                    - city
                    - zip
                    - streetNumber
                    - addressLine
                  properties:
                    city:
                      type: string
                      minLength: 2
                      maxLength: 100
                      example: "Paris"
                    zip:
                      type: string
                      minLength: 5
                      maxLength: 5
                      example: "75001"
                    streetNumber:
                      type: string
                      example: "15"
                    addressLine:
                      type: string
                      maxLength: 255
                      example: "Rue de Rivoli"
                birthDate:
                  type: string
                  format: date
                  example: "1990-01-01"
                profileImage:
                  type: string
                  format: binary
      responses:
        "201":
          description: Super Admin account is created successfully. An email confirmation has been sent to the user. The confirmation link is valid for 15 minutes only.
        "403":
          description: |
            Forbidden:
            - Access denied. Only the super admin can register through this endpoint.
        "422":
          description: |
            Unprocessable Content - The provided inputs failed validation.  
            Please ensure all required fields are correctly filled and meet the validation criteria.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.
            - An error occurred while saving the user's profile image.
            - Unable to send the confirmation email. Please check the user email address and try again.

  #!_______________________________________________________________________________________________________

  /api/users/login:
    post:
      description: User login.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: "jean.dupont@example.com"
                password:
                  type: string
                  minLength: 8
                  maxLength: 50
                  example: "Password123!"
      responses:
        "200":
          description: User logged in successfully! Access and refresh tokens are included in the response.
        "401":
          description: Invalid email or password.
        "403":
          description: |
            Forbidden:
            - The logged in user has been suspended.
            - The email address has not been verified.
            - A password reset request has been made, but it hasn't been finalized.
            - The user is already logged in.
        "422":
          description: |
            Unprocessable Content - The provided inputs failed validation.  
            Please ensure all required fields are correctly filled and meet the validation criteria.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.

  #!_______________________________________________________________________________________________________

  /api/users/create:
    post:
      description: Allows super admin to create a new user account.
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - username
                - email
                - password
                - phone
                - birthDate
                - profileImage
                - role
              properties:
                firstName:
                  type: string
                  minLength: 3
                  maxLength: 30
                  example: "Jean"
                lastName:
                  type: string
                  minLength: 3
                  maxLength: 30
                  example: "Dupont"
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  example: "jeandupont"
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: "jean.dupont@example.com"
                password:
                  type: string
                  minLength: 1
                  maxLength: 50
                  example: "Password123!"
                phone:
                  type: string
                  example: "0612345678"
                address:
                  type: object
                  required:
                    - city
                    - zip
                    - streetNumber
                    - addressLine
                  properties:
                    city:
                      type: string
                      minLength: 2
                      maxLength: 100
                      example: "Paris"
                    zip:
                      type: string
                      minLength: 5
                      maxLength: 5
                      example: "75001"
                    streetNumber:
                      type: string
                      example: "15"
                    addressLine:
                      type: string
                      maxLength: 255
                      example: "Rue de Rivoli"
                birthDate:
                  type: string
                  format: date
                  example: "1990-01-01"
                profileImage:
                  type: string
                  format: binary
                role:
                  type: string
                  enum: ["Admin", "User"]
                  example: "User"
                permissions:
                  description: Permissions are required when role is "User" And prohibited when role is "Admin"
                  type: array
                  items:
                    type: object
                    required:
                      - name
                      - value
                    properties:
                      name:
                        type: string
                        example: "Produits"
                      value:
                        type: integer
                        description: 1 => Read products only, 2 => Create products only, 4 => Update products only, 8 => Delete products only, 3 => Read And Create products, 15 => Read, Create, Update, Delete products. for more inforamations search for "Binary Permissions".
                        example: 1      
      responses:
        "201":
          description: User Account is created successfully. An email confirmation has been sent to the user. The confirmation link is valid for 15 minutes only.
        "400":
          description: Authorization token is missing or invalid format.
        "401":
          description: |
            Unauthorized:
            - The access token has expired. Please request a new access token using the refresh token.
            - The access token is invalid. Authentication required.
        "403":
          description: |
            Forbidden:
            - The logged in user has been suspended.
            - Access denied: User do not have the necessary permissions to perform this action.
        "404":
          description: Logged in user not found.
        "422":
          description: |
            Unprocessable Content - The provided inputs failed validation.  
            Please ensure all required fields are correctly filled and meet the validation criteria.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.
            - An error occurred while saving the user's profile image.
            - Unable to send the confirmation email. Please check the user email address and try again.

  #!_______________________________________________________________________________________________________

  /api/users/get-paginated-users:
    get:
      tags:
        - Users
      security:
        - bearerAuth: []
      description: Get users list with optional pagination.
      parameters:
        - name: page
          in: query
          description: The page number for pagination (default is 1).
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: The number of items per page (default is 10).
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Successful response with a list of paginated users.
        "400":
          description: Authorization token is missing or invalid format.
        "401":
          description: |
            Unauthorized:
            - The access token has expired. Please request a new access token using the refresh token.
            - The access token is invalid. Authentication required.
        "403":
          description: |
            Forbidden:
            - The logged in user has been suspended.
            - Access denied: User do not have the necessary permissions to perform this action.
        "404":
          description: Logged in user not found.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.

  #!_______________________________________________________________________________________________________

  /api/users/get-by-id/{userId}:
    get:
      tags:
        - Users
      security:
        - bearerAuth: []
      description: Get user data by Id.
      parameters:
        - in: params
          name: userId
          schema:
            type: string
          description: User's Id (Required)
      responses:
        "200":
          description: Successful response with user's data.
        "400":
          description: Authorization token is missing or invalid format.
        "401":
          description: |
            Unauthorized:
            - The access token has expired. Please request a new access token using the refresh token.
            - The access token is invalid. Authentication required.
        "403":
          description: |
            Forbidden:
            - The logged in user has been suspended.
            - Access denied: User do not have the necessary permissions to perform this action.
        "404":
          description: |
            Not Found: 
            - Logged in user not found.
            - Requested user not found.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.

  #!_______________________________________________________________________________________________________

  /api/users/get-my-account:
    get:
      tags:
        - Users
      security:
        - bearerAuth: []
      description: Get logged in user data.
      responses:
        "200":
          description: Successful response with user's data.
        "400":
          description: Authorization token is missing or invalid format.
        "401":
          description: |
            Unauthorized:
            - The access token has expired. Please request a new access token using the refresh token.
            - The access token is invalid. Authentication required.
        "403":
          description: |
            Forbidden:
            - The logged in user has been suspended.
        "404":
          description: |
            Not Found: 
            - Logged in user not found.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.

  #!_______________________________________________________________________________________________________

  /api/users/refresh-token/{refreshToken}:
    get:
      tags:
        - Users
      security:
        - bearerAuth: []
      description: Refresh user's access token.
      parameters:
        - in: params
          name: refreshToken
          schema:
            type: string
          description: User's refresh token (Required)
      responses:
        "200":
          description: Successful response with new access token and new refresh token.
        "400":
          description: Authorization token is missing or invalid format.
        "401":
          description: |
            Unauthorized:
            - The access token has expired. Please request a new access token using the refresh token.
            - The access token is invalid. Authentication required.
            - The refresh token has expired. Authentication required.
            - The refresh token is invalid. Authentication required.
        "403":
          description: |
            Forbidden:
            - The logged in user has been suspended.
        "404":
          description: |
            Not Found: 
            - Logged in user not found.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.

  #!_______________________________________________________________________________________________________

  /api/users/suspend-by-id/{userId}:
    put:
      tags:
        - Users
      security:
        - bearerAuth: []
      description: Allows super admin to suspend user's account.
      parameters:
        - in: params
          name: userId
          schema:
            type: string
          description: User's Id (Required)
      responses:
        "200":
          description: User suspended successfully.
        "400":
          description: Authorization token is missing or invalid format.
        "401":
          description: |
            Unauthorized:
            - The access token has expired. Please request a new access token using the refresh token.
            - The access token is invalid. Authentication required.
        "403":
          description: |
            Forbidden:
            - The logged in user has been suspended.
            - Access denied: User do not have the necessary permissions to perform this action.
            - Requested user already suspended.
        "404":
          description: |
            Not Found: 
            - Logged in user not found.
            - Requested user not found.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.

  #!_______________________________________________________________________________________________________

  /api/users/activate-by-id/{userId}:
    put:
      tags:
        - Users
      security:
        - bearerAuth: []
      description: Allows super admin to activate user's account.
      parameters:
        - in: params
          name: userId
          schema:
            type: string
          description: User's Id (Required)
      responses:
        "200":
          description: User activated successfully.
        "400":
          description: Authorization token is missing or invalid format.
        "401":
          description: |
            Unauthorized:
            - The access token has expired. Please request a new access token using the refresh token.
            - The access token is invalid. Authentication required.
        "403":
          description: |
            Forbidden:
            - The logged in user has been suspended.
            - Access denied: User do not have the necessary permissions to perform this action.
            - Requested user already activated.
        "404":
          description: |
            Not Found: 
            - Logged in user not found.
            - Requested user not found.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.

  #!_______________________________________________________________________________________________________

  /api/users/update-role/{userId}:
    put:
      tags:
        - Users
      security:
        - bearerAuth: []
      description: Allows super admin to update user's role.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  enum: ["Admin", "User"]
                  example: "User"
                permissions:
                  description: Permissions are required when role is "User" And prohibited when role is "Admin"
                  type: array
                  items:
                    type: object
                    required:
                      - name
                      - value
                    properties:
                      name:
                        type: string
                        example: "Produits"
                      value:
                        type: integer
                        description: 1 => Read products only, 2 => Create products only, 4 => Update products only, 8 => Delete products only, 3 => Read And Create products, 15 => Read, Create, Update, Delete products. for more inforamations search for "Binary Permissions".
                        example: 1
      responses:
        "200":
          description: User's role updated successfully.
        "400":
          description: |
            Bad Request
            - Authorization token is missing or invalid format.
            - No updates were made. Please ensure there is at least one modification before submitting.
        "401":
          description: |
            Unauthorized:
            - The access token has expired. Please request a new access token using the refresh token.
            - The access token is invalid. Authentication required.
        "403":
          description: |
            Forbidden:
            - The logged in user has been suspended.
            - Access denied: User do not have the necessary permissions to perform this action.
            - Requested user is suspended.
        "404":
          description: |
            Not Found: 
            - Logged in user not found.
            - Requested user not found.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.

  #!_______________________________________________________________________________________________________

  /api/users/email-verification/{emailVerificationToken}:
    get:
      description: Verification of user email.
      tags:
        - Users
      parameters:
        - name: emailVerificationToken
          in: path
          required: true
          description: The email verification token sent to the user's email address.
          schema:
            type: string
      responses:
        "200":
          description: User's email has been successfully verified!
        "400":
          description: |
            Bad Request:
            - The verification token has expired.
            - The verification token is invalid.
            - The user email already verified.
        "404":
          description: User not found.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.

  #!_______________________________________________________________________________________________________

  /api/users/send-email-verification-link:
    post:
      description: Send email verification link to user email.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: "jean.dupont@example.com"
      responses:
        "200":
          description: The confirmation link has been sent to the user email. The confirmation link is valid for 15 minutes only.
        "404":
          description: User not found.
        "422":
          description: |
            Unprocessable Content - The provided inputs failed validation.  
            Please ensure all required fields are correctly filled and meet the validation criteria.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.
            - Unable to send the confirmation email. Please check the user email address and try again.

  #!_______________________________________________________________________________________________________

  /api/users/forget-password:
    post:
      description: Send password reset link to user email.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: "jean.dupont@example.com"
      responses:
        "200":
          description: The password reset link has been sent to the user email. The link is valid for 5 minutes only.
        "404":
          description: User not found.
        "422":
          description: |
            Unprocessable Content - The provided inputs failed validation.  
            Please ensure all required fields are correctly filled and meet the validation criteria.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.
            - Unable to send the password reset link. Please check the user email address and try again.

  #!_______________________________________________________________________________________________________

  /api/users/reset-password:
    post:
      description: Reset user's password.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - passwordResetToken
                - newPassword
              properties:
                passwordResetToken:
                  type: string
                newPassword:
                  type: string
                  minLength: 8
                  maxLength: 50
                  example: "Password123!"
      responses:
        "200":
          description: User's password has been reset successfully!
        "400":
          description: |
            Bad Request:
            - The password reset token has expired.
            - The password reset token is invalid
            - The user has not requested a token to reset the password.
        "404":
          description: User not found.
        "422":
          description: |
            Unprocessable Content - The provided inputs failed validation.  
            Please ensure all required fields are correctly filled and meet the validation criteria.
        "500":
          description: |
            Internal server error:
            - Internal server error.
            - An error occurred while accessing the database. Please try again later.
